FUNCTION_BLOCK
VAR_INPUT
front_distance : REAL;
back_distance : REAL;
left_distance : REAL;
right_distance : REAL;
END_VAR

VAR_OUTPUT
angle : REAL;
END_VAR

FUZZIFY front_distance
TERM close := (0, 1) (0.05, 1) (0.0625, 0.50) (0.075, 0) (0.08, 0) (0.2, 0);
TERM medium := (0.05, 0) (0.0625, 0.50) (0.075, 1) (0.08, 1) (0.2, 1) (3, 1) (4, 0.50) (5, 0);
TERM far := (3, 0) (4, 0.5) (5, 1) (7, 1) (10, 1);
END_FUZZIFY

FUZZIFY back_distance
TERM close := (0, 1) (1, 1) (1.25, 0.50) (1.50, 0);
TERM medium := (1, 0) (1.25, 0.50) (1.50, 1) (3, 1) (4, 0.50) (5, 0);
TERM far := (3, 0) (4, 0.5) (5, 1) (7, 1) (10, 1);
END_FUZZIFY

FUZZIFY left_distance
TERM close := (0, 1) (0.10, 1) (0.30, 0.50) (0.50, 0);
TERM medium := (0.10, 0) (0.30, 0.50) (0.50, 1) (3, 1) (4, 0.50) (5, 0);
TERM far := (3, 0) (4, 0.5) (5, 1) (7, 1) (10, 1);
END_FUZZIFY

FUZZIFY right_distance
TERM close := (0, 1) (0.10, 1) (0.30, 0.50) (0.50, 0);
TERM medium := (0.10, 0) (0.30, 0.50) (0.50, 1) (3, 1) (4, 0.50) (5, 0);
TERM far := (3, 0) (4, 0.50) (5, 1) (7, 1) (10, 1);
END_FUZZIFY

DEFUZZIFY angle
TERM strong_left := (-180, 0) (-175, 0.50) (-170, 1) (-130, 1) (-110, 0.50) (-90, 0);
TERM left := (-130, 0) (-110, 0.50) (-90, 1) (-10, 1) (-5, 0.50) (0, 0);
TERM no_movement := (-10, 0) (-5, 0.50) (0, 1) (5, 0.50) (10, 0);
TERM right := (0, 0) (5, 0.50) (10, 1) (45, 1) (90, 1) (110, 0.50) (130, 0);
TERM strong_right := (90, 0) (110, 0.50) (130, 1) (170, 1) (175, 0.50) (180, 0);
TERM turn_back := (-180, 1) (-175, 0.50) (-170, 0) (170, 0) (175, 0.50) (180, 1);
METHOD : COA;
DEFAULT := 0;
END_DEFUZZIFY

RULEBLOCK block
AND: MIN;
ACT: MIN;

RULE 0: IF front_distance IS far OR front_distance IS medium THEN angle IS no_movement;

RULE 1: IF front_distance IS close AND left_distance IS close AND right_distance IS close THEN angle IS turn_back;
RULE 2: IF front_distance IS close AND left_distance IS close AND right_distance IS far THEN angle IS strong_right;
RULE 3: IF front_distance IS close AND left_distance IS close AND right_distance IS medium AND back_distance IS close THEN angle IS right;
RULE 4: IF front_distance IS close AND left_distance IS close AND right_distance IS medium AND back_distance IS NOT close THEN angle IS strong_right;

RULE 5: IF front_distance IS close AND left_distance IS far THEN angle IS strong_left;

RULE 6: IF front_distance IS close AND left_distance IS medium AND right_distance IS close AND back_distance IS close THEN angle IS left;
RULE 7: IF front_distance IS close AND left_distance IS medium AND right_distance IS close AND back_distance IS NOT close THEN angle IS strong_left;
RULE 8: IF front_distance IS close AND left_distance IS medium AND right_distance IS far THEN angle IS right;
RULE 9: IF front_distance IS close AND left_distance IS medium AND right_distance IS medium AND back_distance IS NOT far THEN angle IS strong_right;
RULE 10: IF front_distance IS close AND left_distance IS medium AND right_distance IS medium AND back_distance IS far THEN angle IS turn_back;
END_RULEBLOCK

END_FUNCTION_BLOCK